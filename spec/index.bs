<pre class="metadata">
Title: STaMPv1
Status: LS-COMMIT
Shortname: stamp-spec
Level: none
Editor: Andrei Sova
Abstract: This document specifies the Simple Table-based Messaging Protocol (STaMP) protocol, version 1. STaMP is secure and simple text-based communication protocol.
Markup Shorthands: markdown yes
Warning: Not Ready
</pre>

<pre boilerplate="copyright">
Copyright &copy; [YEAR] Andrei Sova
</pre>

Note: This document can always be improved upon. I am by no means an expert at writing specifications, and have mostly been writing this for fun. So please, contribute on Github!

# Introduction # {#introduction}

STaMP is an application-layer communication protocol. The protocol uses a syntax generally built upon the CSV specification outlined in [[!RFC4180]]. Furthermore, STaMP has an additional subsyntax used for retrieving and setting flags, as described in [[#flag-dot-notation]].

Unlike [[RFC1459]], this specification implements several mandatory authorization and user management features. STaMP's use of CSV additionally significantly simplifies the development of client software, as it introduces a unified syntax for interacting with the server. This is further simplified by STaMP's orthogonal design, which requires clients and servers to implement only a few interconnected components to achieve functioning software.

Additionally, though not an email replacement, STaMP can be used as a simpler alternative to [[RFC5321]] and [[RFC9051]], thanks to the ability to store and send persistant messages in a federated manner.

Messaging has evolved drastically over the past several decades, growing from being strictly a means of text message transmission to a broader aspect of human life. Therefore, STaMP is built from the ground up as an extensible protocol, to facilitate the always-changing needs of internet communication.

## Terminology ## {#terminology}

The following terminology is to be used in this document or when referencing STaMP.
<pre class=simpledef>
Server: Any STaMP compliant program that listens for connections on the standard STaMP port (see [[#standard-ports]]) and accepts client connections to a root feed.
Client: Any STaMP compliant program that connects to a STaMP compliant server.
User: A person who connects to a STaMP server using a client for the intent of communication.
Chatroom: A shared communication channel containing multiple users.
</pre>

Unless otherwise specified, the value of flags as described in [[#root-feed]] must be assumed to be the character "0".

# High-Level Specification Overview # {#Spec-Overview}

There are only two distinct object types present in the STaMP protocol, namely **feeds** and **flags**. Together, feeds and flags act as a unified interface used to describe all other roles and objects in the protocol, which are often represented by vastly different concepts in other specifications. 

## Feeds ## {#feeds}

Feeds are a hierarchical object structure used to model communication and relational structures across the specification. They are used to model chat users, chatrooms, and the server itself.

One of the most important properties of feeds is their ability to contain an arbitrary number of subfeeds, also called children feeds. A feed can additionally have any number of flags, as discussed in [[#flags]]. Additionally, feeds are conceptually similar to a linked-list in that each feed holds a conceptual reference to another, as described in [[#method-stamp-follow]].

Every feed must have a name flag, which used for addressing purposes as described in [[#stamp-feed-address]].

In its initial state, a STaMP server begins with a single feed, called the **root feed**, as described in [[#root-feed]].

The properties of flags makes them ideal for representing user messages, clients, and chatrooms.

## Flags ## {#flags}

STaMP flags are a way of attaching options and metadata to feeds.

STaMP's permission model is entirely based around the hierarchical nature of feeds. Specifically, parent feeds always have direct permission privilege over their child feeds and pass on their feeds values to their child feed. In other words, subfeeds inherit all flag values from their parents. By default, feeds are able to modify their own flags, overwriting the options inherited from their parents. However, this behavior can be changed by prefixing the flag name with an asterisk symbol, which makes it impossible for child feeds to modify the inherited value of the flag. 

## Connections ## {#connections}

Connections to a STaMP server can be initiated by users or by other STaMP servers.

# Protocol Syntax # {#spec-syntax}

## Flag Dot Notation ## {#flag-dot-notation}

Dot notation can be used to retrieve or set flag values of any specified feed. The simple syntax can be expressed in the following railroad diagram:

<pre class="railroad">
T: <BASE-FLAG>
ZeroOrMore:
    T: .
    T: <SUB-FLAG>
</pre>

## STaMP Feed Address Syntax ## {#stamp-feed-address}

The Feed Address Syntax is the fundamental method of addressing feeds withing the STaMP protocol. FAS can be essentially understood as an extension to the email address syntax described in [[RFC5322]]. The syntax of FAS can be seen in the following railroad diagram:

<pre class="railroad">
T: <BASE-FEED-NAME>
OneOrMore:
    T: <SUBFEED-NAME>
    T: @
</pre>

<div class="example">
The FAS address `user@channel@example.com` is used to address the feed with the name "user" that is a subfeed of the feed with the name "channel" which itself is a child of the feed with the name "example.com"
</div>

# STaMP Methods # {#methods}

## STAMP-AUTH ## {#method-stamp-auth}

The `STAMP-AUTH` method must be called immediately once a connection is established between a client and a STaMP server.

<div class="example">
STAMP-AUTH request:
<pre>
METHOD,STAMP-AUTH
USER,&lt;user&gt;
PASS,&lt;pass&gt;
DOMAIN,&lt;domain&gt;
</pre>
</div>

<div class="example">
STAMP-AUTH response:
<pre>
FEED,&lt;user&gt;@&lt;hostname&gt;
KEEPALIVE-TIMER,60
</pre>
</div>

## STAMP-KEEPALIVE ## {#method-stamp-keepalive}

<pre class="example">
METHOD,STAMP-KEEPALIVE
</pre>

## STAMP-NEXT ## {#method-stamp-follow}

## STAMP-CREATE ## {#method-stamp-follow}

## STAMP-DELFLAG ## {#method-stamp-delete}

## STAMP-DELFEED ## {#method-stamp-unset}

## STAMP-QUERY ## {#method-stamp-query}

## STAMP-SET ## {#method-stamp-set}


# Server Requirements and Behavior # {#server-requirements}

## Text Encoding ## {#string-encoding}

All strings and text communicated through the STaMP protocol, as well as all CSV tables and flags read and written must be in a valid utf-8 text encoding.

## Feed Behavior And Standard Flags ## {#root-feed}

### Universal Flags ### {#universal-flags}

#### META and STATUS #### {#universal-flags-metastatus}

Every feed in a STaMP compliant server must have the following mandatory flags:

<pre>
├── META
│   ├── NAME
│   └── DESCRIPTION
└── STATUS
</pre>

: NAME
:: A flag with a string value containing the name of the feed. For user feeds, this flag may contain their username. Likewise, for chatroom feeds, this flag may contain the name of the chatroom.
: DESCRIPTION
:: A flag with a string value containing a description of the feed. For user feeds, this flag may contain user-written introductions or short bibliographies. For chatroom feeds, this flag can be used to hold the topic of discussion or any other free-form text.
: STATUS
:: A flag with a string value containing the current status of the feed. This flag must conform to the following syntax:

<pre class="railroad">
Choice:
    T: online
    T: local
    T: offline
</pre>

:: For user feeds, this flag must be set to "online" or "local" if the user is actively authenticated to the server or "offline" if the user is offline. For chatroom feeds, this flag may be set to "offline" if so desired by an admin. For the root feed, this flag must be set to either "local" or "online." Feeds with a STATUS flag with a value of "local" must not allow the creation of pseudo feeds by feeds with a different root feed than itself.

#### SERVER #### {#universal-flags-server}

Every feed in a STaMP server must have a dedicated `SERVER` flag, which contains information about the server software it is running.

<pre>
SERVER
├── NAME
├── VERSION
└── PROTOCOL_VERSION
</pre>

: NAME
:: A flag with a string value containing the name of the server software the STaMP server is running.
: VERSION
:: A flag with a string value containing the version of the server software the STaMP server is running.
: PROTCOL_VERSION
:: A flag with a string value containing the version of the STaMP protocol that the server supports. This value would be expressed by `STaMP/<version>`, where `<version>` is the version of the STaMP protocol used. For example, STaMP protocol version 1 would be expressed as `STaMP/1`

### User Authentication and Connection

## Standard Ports ## {#standard-ports}

For STaMP servers listening for connections over TCP/IP, the following port numbers are preferred.
<pre class="simpledef">
5757: Default and preferred STaMP server port.
6868: Alternative STaMP server port.
</pre>

Clients should attempt to connect to the preferred port, and fall back to the alternative port if no connection can be established. For STaMP servers using other connection methods, such as [[RFC6455]], this is not applicable.

## Status Codes ## {#exceptions}

In the case of an error, the STaMP server must return a valid exception. The general CSV syntax for error messages or general status is as follow.

<pre class="example">
STATUS,MESSAGE
&lt;code&gt;,&lt;message&gt;
</pre>

Where `<code>` is the status name and `<message>` is an optional description of the cause of the error.

### EOK ### {#error-ok}

The `EOK` status is sent when a method is completed without any errors.

<pre class="example">
STATUS,MESSAGE
EOK,
</pre>

### ESYNTAX ### {#error-esyntax}

In the event that an incorrectly formatted CSV table or incorrect syntax is sent to the STaMP server, the server must reply with a `ESYNTAX` error.

<pre class="example">
STATUS,MESSAGE
ESYNTAX,"Invalid CSV"
</pre>

### EBANNED ### {#error-ebanned}

If an IP or account is banned, the `EBANNED` error will be thrown to the offending client. The message field of this exception must be either an empty string or the reason for the ban.

<pre class="example">
STATUS,MESSAGE
EBANNED,"Spam"
</pre>

### EFORBIDDEN ### {#error-forbidden}

If a user does not have permission to perform an action, the `EFORBIDDEN` exception must be thrown.

<pre class="example">
STATUS,MESSAGE
EFORBIDDEN,"Forbidden"
</pre>

### EFAIL ### {#error-fail}

The `EFAIL` exception is thrown if an error occurs on the STaMP server for reasons unrelated to the user's action.

<pre class="example">
STATUS,MESSAGE
EFAIL,"Exception thrown at server.cpp:320"
</pre>
